{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "id": "https://cloudbase.net/schemas/cli-1/schema",
  "title": "CloudBase CLI Configuration",
  "type": "object",
  "properties": {
    "$schema": {
      "type": "string"
    },
    "additionalProperties": false,
    "version": {
      "type": "string",
      "description": "version 表示当前配置文件的版本，目前支持的版本号有：\"2.0\"。当 version 字段不存在时，默认当前配置文件为 \"1.0\" 版本。",
      "enum": [
        "1.0",
        "2.0"
      ],
      "default": "2.0"
    },
    "envId": {
      "type": "string",
      "description": "envId 代表环境 ID，是环境的唯一标识。"
    },
    "functionRoot": {
      "type": "string",
      "description": "云函数函数代码存放的文件夹路径，相对于根目录的路径"
    },
    "functions": {
      "type": "array",
      "description": "函数配置项组成的数组"
    },
    "framework": {
      "type": "object",
      "description": "CloudBase Framework 配置项",
      "properties": {
        "name": {
          "type": "string",
          "description": "应用唯一标识，一个账号下最好不要有重名的 name。",
          "maxLength": 16
        },
        "plugins": {
          "additionalProperties": false,
          "patternProperties": {
            "^[a-zA-Z0-9]+$": {
              "$ref": "#/definitions/pluginConfig"
            }
          }
        }
      }
    }
  },
  "required": [
    "envId"
  ],
  "definitions": {
    "pluginConfig": {
      "anyOf": [
        {
          "$ref": "#/definitions/IFrameworkPluginWebsiteInputsConfig"
        },
        {
          "$ref": "#/definitions/IFrameworkPluginNodeInputsConfig"
        },
        {
          "$ref": "#/definitions/IFrameworkPluginNuxtInputsConfig"
        },
        {
          "$ref": "#/definitions/IFrameworkPluginFunctionInputsConfig"
        },
        {
          "$ref": "#/definitions/IFrameworkPluginContainerInputsConfig"
        },
        {
          "$ref": "#/definitions/IFrameworkPluginDartInputsConfig"
        },
        {
          "$ref": "#/definitions/IFrameworkPluginDatabaseInputsConfig"
        },
        {
          "$ref": "#/definitions/IFrameworkPluginDenoInputsConfig"
        },
        {
          "$ref": "#/definitions/IFrameworkPluginNextInputsConfig"
        }
      ]
    },
    "IFrameworkPluginWebsiteInputsConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "use": {
          "type": "string",
          "enum": [
            "@cloudbase/framework-plugin-website"
          ]
        },
        "inputs": {
          "description": "导出接口用于生成 JSON Schema 来进行智能提示",
          "type": "object",
          "properties": {
            "installCommand": {
              "description": "安装命令，如`npm install`，没有可不传",
              "default": "npm install --prefer-offline --no-audit --progress=false",
              "type": "string"
            },
            "buildCommand": {
              "description": "构建命令，如`npm run build`，没有可不传",
              "type": "string"
            },
            "outputPath": {
              "description": "网站静态文件的路径",
              "default": "dist",
              "type": "string"
            },
            "cloudPath": {
              "description": "静态资源部署到云开发环境的路径，默认为根目录。",
              "default": "/",
              "type": "string"
            },
            "ignore": {
              "description": "静态资源部署时忽略的文件路径，支持通配符",
              "default": [
                ".git",
                ".github",
                "node_modules",
                "cloudbaserc.js"
              ],
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "envVariables": {
              "description": "环境变量键值对，会被注入到静态网站根目录下的 `/cloudbaseenv.json`",
              "$ref": "#/definitions/Record<string,string>"
            },
            "runCommand": {
              "description": "执行 cloudbase framework:run 时，运行的默认指令",
              "type": "string"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "required": [
        "use",
        "inputs"
      ]
    },
    "Record<string,string>": {
      "type": "object"
    },
    "IFrameworkPluginNodeInputsConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "use": {
          "type": "string",
          "enum": [
            "@cloudbase/framework-plugin-node"
          ]
        },
        "inputs": {
          "description": "导出接口用于生成 JSON Schema 来进行智能提示",
          "type": "object",
          "properties": {
            "runtime": {
              "description": "Node 运行时版本",
              "default": "Nodejs10.15",
              "enum": [
                "Nodejs10.15",
                "Nodejs8.9"
              ],
              "type": "string"
            },
            "entry": {
              "description": "Node 服务入口文件，相对于`projectPath`,需要导出 app 或者 server 的实例，同时也支持导出异步获取 app 的 `tcbGetApp` 方法，方法的返回值为 app 或者 server 的实例。\n\n如 koa 服务的 `app.js`\n\n```javascript\nconst Koa = require(\"koa\");\nconst { router } = require(\"./routes/\");\n\nconst app = new Koa();\n\napp.use(router.routes());\n\nmodule.exports = app;\n```\n\nnest 服务的 `app.js`\n\n```js\nconst express = require(\"express\");\nconst { NestFactory } = require(\"@nestjs/core\");\nconst { ExpressAdapter } = require(\"@nestjs/platform-express\");\nconst { AppModule } = require(\"./dist/app.module\");\n\nconst expressApp = express();\nconst adapter = new ExpressAdapter(expressApp);\n\nexports.tcbGetApp = async () => {\n   const app = await NestFactory.create(AppModule, adapter);\n   await app.init();\n   return expressApp;\n};\n```",
              "default": "app.js",
              "type": "string"
            },
            "path": {
              "description": "访问子路径",
              "default": "/node-app",
              "type": "string"
            },
            "name": {
              "description": "服务名，会生成同名云函数或者云应用",
              "default": "node-app",
              "type": "string"
            },
            "projectPath": {
              "description": "指定 Node 服务所在目录，相对于当前项目根目录",
              "default": ".",
              "type": "string"
            },
            "buildCommand": {
              "description": "指定构建命令，比如`npm run build`",
              "type": "string"
            },
            "platform": {
              "description": "底层使用平台，支持 `container`（ serverless 云应用） 和 `function` （云函数）",
              "default": "function",
              "enum": [
                "container",
                "function"
              ],
              "type": "string"
            },
            "containerOptions": {
              "description": "云应用自定义选项\n\n选填，当 `platform` 选择 `container` 时，可以支持自定义更多高级设置，例如 CPU 内存等\n例如\n\n```json\n{\n   \"use\": \"@cloudbase/framework-plugin-node\",\n   \"inputs\": {\n     \"entry\": \"app.js\",\n     \"path\": \"/nodeapp\",\n     \"name\": \"nodeapp\",\n     \"platform\": \"container\",\n     \"containerOptions\": {\n       \"cpu\": 2,\n       \"mem\": 2\n     }\n   }\n}\n```\n\n具体配置信息请参考 [@cloudbase/framework-plugin-container](https://github.com/TencentCloudBase/cloudbase-framework/tree/master/packages/framework-plugin-container#cpu) 配置",
              "$ref": "#/definitions/IFrameworkPluginContainerInputs"
            },
            "functionOptions": {
              "description": "函数选项\n\n选填，当 `platform` 选择 `function` 时，可以支持自定义更多高级设置，例如 VPC 环境变量等\n\n例如\n\n```json\n{\n   \"use\": \"@cloudbase/framework-plugin-node\",\n   \"inputs\": {\n     \"entry\": \"app.js\",\n     \"path\": \"/nodeapp\",\n     \"name\": \"nodeapp\",\n     \"platform\": \"function\",\n     \"functionOptions\": {\n       \"timeout\": 5,\n       \"envVariables\": {\n         \"TEST_ENV\": 1\n       },\n       \"vpc\": {\n         \"vpcId\": \"xxx\",\n         \"subnetId\": \"xxx\"\n       }\n     }\n   }\n}\n```\n\n具体配置信息请参考 [@cloudbase/framework-plugin-function](https://github.com/TencentCloudBase/cloudbase-framework/blob/master/packages/framework-plugin-function/README.md#functions) 配置"
            },
            "wrapExpress": {
              "description": "当 `platform` 选择 `function` 时，可以支持自动为函数包上一层 express\n\n例如\n\n```json\n{\n   \"envId\": \"fx\",\n   \"framework\": {\n     \"plugins\": {\n       \"server\": {\n         \"use\": \"@cloudbase/framework-plugin-node\",\n         \"inputs\": {\n           \"entry\": \"./api/index.js\",\n           \"path\": \"/api\",\n           \"name\": \"github-stats-api\",\n           \"wrapExpress\": true\n         }\n       },\n       \"pin\": {\n         \"use\": \"@cloudbase/framework-plugin-node\",\n         \"inputs\": {\n           \"entry\": \"./api/pin.js\",\n           \"path\": \"/api/pin\",\n           \"name\": \"github-stats-pin\",\n           \"wrapExpress\": true\n         }\n       }\n     }\n   }\n}\n```",
              "type": "boolean"
            },
            "installDeps": {
              "type": "boolean"
            }
          },
          "required": [
            "name",
            "path"
          ],
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "required": [
        "use",
        "inputs"
      ]
    },
    "IFrameworkPluginContainerInputs": {
      "description": "导出接口用于生成 JSON Schema 来进行智能提示",
      "type": "object",
      "properties": {
        "uploadType": {
          "description": "容器镜像代码来源类别\n\n支持`package|image|repository`3 种，分别代表本地代码包、镜像地址和 git 仓库地址。默认是`package`, 选择`image`时需要填写 `imageInfo`, 选择 `repository` 需要填写`codeDetail`",
          "enum": [
            "image",
            "package",
            "repository"
          ],
          "type": "string"
        },
        "serviceName": {
          "description": "服务名，字符串格式，如 `node-api`",
          "type": "string"
        },
        "servicePath": {
          "description": "服务路径配置, 字符串格式, 如 `/node-api`",
          "type": "string"
        },
        "description": {
          "description": "服务描述",
          "type": "string"
        },
        "isPublic": {
          "description": "是否对外网开放访问",
          "default": true,
          "type": "boolean"
        },
        "flowRatio": {
          "description": "流量占比（0-100）",
          "minimum": 0,
          "maximum": 100,
          "default": 100,
          "type": "number"
        },
        "cpu": {
          "description": "CPU 的大小，1-128, 单位：核，默认值 `1`",
          "default": 1,
          "type": "number"
        },
        "mem": {
          "description": "Mem 的大小，1-128, 单位：G，默认值 `1`",
          "default": 1,
          "type": "number"
        },
        "minNum": {
          "description": "最小副本数, 1-50，默认值 `1`",
          "default": 1,
          "type": "number"
        },
        "maxNum": {
          "description": "最大副本数, 1-50，默认值 `10`",
          "maximum": 50,
          "default": 10,
          "type": "number"
        },
        "policyType": {
          "description": "策略类型(cpu)，默认值 `cpu`",
          "enum": [
            "cpu"
          ],
          "type": "string"
        },
        "policyThreshold": {
          "description": "策略阈值，1-100, 默认值 `60`",
          "minimum": 0,
          "maximum": 100,
          "default": 60,
          "type": "number"
        },
        "containerPort": {
          "description": "服务端口，默认值 `80`",
          "default": 80,
          "type": "number"
        },
        "dockerfilePath": {
          "description": "Dockerfile 的路径，默认值 `./Dockerfile`",
          "default": "./Dockerfile",
          "type": "string"
        },
        "buildDir": {
          "description": "构建目录，默认值 `./`",
          "default": "./",
          "type": "string"
        },
        "version": {
          "description": "服务版本名",
          "default": "1.0.0",
          "type": "string"
        },
        "localPath": {
          "description": "本地代码文件夹相对于项目根目录的路径",
          "default": "./",
          "type": "string"
        },
        "localAbsolutePath": {
          "description": "本地代码文件夹的绝对路径",
          "type": "string"
        },
        "envVariables": {
          "description": "环境变量键值对，会被注入到云应用的运行时环境变量中",
          "$ref": "#/definitions/Record<string,string>"
        },
        "imageInfo": {
          "description": "`uploadType` 填写为 `image`时需要填写 `imageInfo`，类型是对象格式",
          "$ref": "#/definitions/IContainerImageInfo"
        },
        "codeDetail": {
          "description": "`uploadType` 填写为 `repository` 时需要填写`codeDetail`，类型是对象格式\n\n例如\n\n```json\n{\n   \"envId\": \"{{envId}}\",\n   \"framework\": {\n     \"name\": \"capp-example\",\n     \"plugins\": {\n       \"client\": {\n         \"use\": \"@cloudbase/framework-plugin-container\",\n         \"inputs\": {\n           \"serviceName\": \"deno\",\n           \"servicePath\": \"/deno\",\n           \"localPath\": \"./\",\n           \"uploadType\": \"repository\",\n           \"codeDetail\": {\n             \"name\": \"deno-docker\",\n             \"url\": \"https://github.com/TabSpace/deno-docker\"\n           }\n         }\n       }\n     }\n   }\n}\n```",
          "$ref": "#/definitions/IContainerCodeDetail"
        }
      },
      "required": [
        "serviceName",
        "servicePath"
      ]
    },
    "IContainerImageInfo": {
      "type": "object",
      "properties": {
        "imageUrl": {
          "description": "镜像拉取地址\n\nimageUrl 格式为 [registry-url]/[namespace]/[image]:[tag]，支持腾讯云 ccr.ccs.tencentyun.com 上的镜像地址，也支持 dockerhub 公开的镜像，如 `nginx:latest`\n例如\n\n```json\n{\n   \"envId\": \"{{envId}}\",\n   \"framework\": {\n     \"name\": \"capp-example\",\n     \"plugins\": {\n       \"client\": {\n         \"use\": \"@cloudbase/framework-plugin-container\",\n         \"inputs\": {\n           \"serviceName\": \"node-api\",\n           \"servicePath\": \"/node-api\",\n           \"localPath\": \"./\",\n           \"uploadType\": \"image\",\n           \"imageInfo\": {\n             \"imageUrl\": \"ccr.ccs.tencentyun.com/tcb-100010952056-rjdt/webpage_node-api:node-api-001-1597238358\"\n           }\n         }\n       }\n     }\n   }\n}\n```",
          "type": "string"
        }
      },
      "required": [
        "imageUrl"
      ]
    },
    "IContainerCodeDetail": {
      "type": "object",
      "properties": {
        "name": {
          "description": "Repo的名字",
          "type": "string"
        },
        "url": {
          "description": "Repo 的url",
          "type": "string"
        }
      },
      "required": [
        "url"
      ]
    },
    "IFrameworkPluginNuxtInputsConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "use": {
          "type": "string",
          "enum": [
            "@cloudbase/framework-plugin-nuxt"
          ]
        },
        "inputs": {
          "description": "导出接口用于生成 JSON Schema 来进行智能提示",
          "type": "object",
          "properties": {
            "entry": {
              "description": "Nuxt 配置文件所在目录，默认当前项目所在目录",
              "default": "./",
              "type": "string"
            },
            "path": {
              "description": "访问子路径，如 `/nuxt-ssr`",
              "default": "/nuxt-ssr",
              "type": "string"
            },
            "name": {
              "description": "服务名，如`nuxt-ssr`",
              "default": "nuxt-ssr",
              "type": "string"
            },
            "installCommand": {
              "description": "安装命令，如`npm install`，没有可不传",
              "default": "npm install",
              "type": "string"
            },
            "buildCommand": {
              "description": "构建命令，如`npm run build`，没有可不传",
              "default": "npm run build",
              "type": "string"
            },
            "runtime": {
              "description": "函数运行时版本",
              "default": "\"Nodejs10.15",
              "enum": [
                "Nodejs10.15",
                "Nodejs8.9"
              ],
              "type": "string"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "required": [
        "use",
        "inputs"
      ]
    },
    "IFrameworkPluginFunctionInputsConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "use": {
          "type": "string",
          "enum": [
            "@cloudbase/framework-plugin-function"
          ]
        },
        "inputs": {
          "description": "导出接口用于生成 JSON Schema 来进行智能提示",
          "type": "object",
          "properties": {
            "functionRootPath": {
              "description": "函数根目录",
              "default": "functions",
              "type": "string"
            },
            "functions": {
              "description": "函数配置数组",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ICloudFunction"
              }
            },
            "servicePaths": {
              "description": "服务路径配置\n\n如\n\n```json\n{\n   \"hello-world\": \"/helloworld\"\n}\n```",
              "$ref": "#/definitions/Record<string,string>"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "required": [
        "use",
        "inputs"
      ]
    },
    "ICloudFunction": {
      "type": "object",
      "properties": {
        "name": {
          "description": "云函数名称，即为函数部署后的名称",
          "type": "string"
        },
        "handler": {
          "description": "函数处理方法名称，名称格式支持“文件名称.函数名称”形式",
          "default": "index.main",
          "type": "string"
        },
        "timeout": {
          "description": "函数超时时间（1 - 60S）",
          "type": "number"
        },
        "envVariables": {
          "description": "包含环境变量的键值对",
          "$ref": "#/definitions/Record<string,string|number|boolean>"
        },
        "runtime": {
          "description": "运行时环境配置，可选值： `Nodejs8.9, Nodejs10.15 Php7, Java8`",
          "default": "Nodejs10.15",
          "enum": [
            "Java8",
            "Nodejs10.15",
            "Nodejs8.9",
            "Php7"
          ],
          "type": "string"
        },
        "vpc": {
          "description": "VPC",
          "$ref": "#/definitions/IFunctionVPC"
        },
        "installDependency": {
          "description": "是否云端安装依赖，目前仅支持 Node.js",
          "type": "boolean"
        },
        "isWaitInstall": {
          "type": "boolean"
        },
        "functionDistPath": {
          "description": "函数产物路径，相对于函数根目录 functionRootPath，例如 Go 语言可指定二进制文件路径，Java 可以指定 jar 包文件地址",
          "type": "string"
        },
        "ignore": {
          "description": "忽略的文件",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "Record<string,string|number|boolean>": {
      "type": "object"
    },
    "IFunctionVPC": {
      "type": "object",
      "properties": {
        "vpcId": {
          "description": "vpc 的id",
          "type": "string"
        },
        "subnetId": {
          "description": "子网id",
          "type": "string"
        }
      },
      "required": [
        "subnetId",
        "vpcId"
      ]
    },
    "IFrameworkPluginContainerInputsConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "use": {
          "type": "string",
          "enum": [
            "@cloudbase/framework-plugin-container"
          ]
        },
        "inputs": {
          "description": "导出接口用于生成 JSON Schema 来进行智能提示",
          "type": "object",
          "properties": {
            "uploadType": {
              "description": "容器镜像代码来源类别\n\n支持`package|image|repository`3 种，分别代表本地代码包、镜像地址和 git 仓库地址。默认是`package`, 选择`image`时需要填写 `imageInfo`, 选择 `repository` 需要填写`codeDetail`",
              "enum": [
                "image",
                "package",
                "repository"
              ],
              "type": "string"
            },
            "serviceName": {
              "description": "服务名，字符串格式，如 `node-api`",
              "type": "string"
            },
            "servicePath": {
              "description": "服务路径配置, 字符串格式, 如 `/node-api`",
              "type": "string"
            },
            "description": {
              "description": "服务描述",
              "type": "string"
            },
            "isPublic": {
              "description": "是否对外网开放访问",
              "default": true,
              "type": "boolean"
            },
            "flowRatio": {
              "description": "流量占比（0-100）",
              "minimum": 0,
              "maximum": 100,
              "default": 100,
              "type": "number"
            },
            "cpu": {
              "description": "CPU 的大小，1-128, 单位：核，默认值 `1`",
              "default": 1,
              "type": "number"
            },
            "mem": {
              "description": "Mem 的大小，1-128, 单位：G，默认值 `1`",
              "default": 1,
              "type": "number"
            },
            "minNum": {
              "description": "最小副本数, 1-50，默认值 `1`",
              "default": 1,
              "type": "number"
            },
            "maxNum": {
              "description": "最大副本数, 1-50，默认值 `10`",
              "maximum": 50,
              "default": 10,
              "type": "number"
            },
            "policyType": {
              "description": "策略类型(cpu)，默认值 `cpu`",
              "enum": [
                "cpu"
              ],
              "type": "string"
            },
            "policyThreshold": {
              "description": "策略阈值，1-100, 默认值 `60`",
              "minimum": 0,
              "maximum": 100,
              "default": 60,
              "type": "number"
            },
            "containerPort": {
              "description": "服务端口，默认值 `80`",
              "default": 80,
              "type": "number"
            },
            "dockerfilePath": {
              "description": "Dockerfile 的路径，默认值 `./Dockerfile`",
              "default": "./Dockerfile",
              "type": "string"
            },
            "buildDir": {
              "description": "构建目录，默认值 `./`",
              "default": "./",
              "type": "string"
            },
            "version": {
              "description": "服务版本名",
              "default": "1.0.0",
              "type": "string"
            },
            "localPath": {
              "description": "本地代码文件夹相对于项目根目录的路径",
              "default": "./",
              "type": "string"
            },
            "localAbsolutePath": {
              "description": "本地代码文件夹的绝对路径",
              "type": "string"
            },
            "envVariables": {
              "description": "环境变量键值对，会被注入到云应用的运行时环境变量中",
              "$ref": "#/definitions/Record<string,string>"
            },
            "imageInfo": {
              "description": "`uploadType` 填写为 `image`时需要填写 `imageInfo`，类型是对象格式",
              "$ref": "#/definitions/IContainerImageInfo"
            },
            "codeDetail": {
              "description": "`uploadType` 填写为 `repository` 时需要填写`codeDetail`，类型是对象格式\n\n例如\n\n```json\n{\n   \"envId\": \"{{envId}}\",\n   \"framework\": {\n     \"name\": \"capp-example\",\n     \"plugins\": {\n       \"client\": {\n         \"use\": \"@cloudbase/framework-plugin-container\",\n         \"inputs\": {\n           \"serviceName\": \"deno\",\n           \"servicePath\": \"/deno\",\n           \"localPath\": \"./\",\n           \"uploadType\": \"repository\",\n           \"codeDetail\": {\n             \"name\": \"deno-docker\",\n             \"url\": \"https://github.com/TabSpace/deno-docker\"\n           }\n         }\n       }\n     }\n   }\n}\n```",
              "$ref": "#/definitions/IContainerCodeDetail"
            }
          },
          "required": [
            "serviceName",
            "servicePath"
          ],
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "required": [
        "use",
        "inputs"
      ]
    },
    "IFrameworkPluginDartInputsConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "use": {
          "type": "string",
          "enum": [
            "@cloudbase/framework-plugin-dart"
          ]
        },
        "inputs": {
          "description": "导出接口用于生成 JSON Schema 来进行智能提示",
          "type": "object",
          "properties": {
            "serviceName": {
              "description": "服务名，字符串格式，如 `dart-api`",
              "default": "dart-api",
              "type": "string"
            },
            "servicePath": {
              "description": "服务访问路径配置, 字符串格式, 如 `/dart-api`",
              "default": "/dart-api",
              "type": "string"
            },
            "localPath": {
              "description": "本地代码文件夹相对于项目根目录的路径，默认值 `./`",
              "default": "./",
              "type": "string"
            },
            "localAbsolutePath": {
              "description": "本地代码文件夹的绝对路径",
              "type": "string"
            },
            "version": {
              "description": "版本名，默认值 `1.0.0`",
              "default": "1.0.0",
              "type": "string"
            },
            "isPublic": {
              "description": "是否对外网开放访问，默认值 `true`",
              "default": true,
              "type": "boolean"
            }
          },
          "required": [
            "serviceName",
            "servicePath"
          ],
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "required": [
        "use",
        "inputs"
      ]
    },
    "IFrameworkPluginDatabaseInputsConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "use": {
          "type": "string",
          "enum": [
            "@cloudbase/framework-plugin-database"
          ]
        },
        "inputs": {
          "description": "导出接口用于生成 JSON Schema 来进行智能提示",
          "type": "object",
          "properties": {
            "collections": {
              "description": "数据库集合信息，数组类型",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ICollectionInputs"
              }
            }
          },
          "required": [
            "collections"
          ],
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "required": [
        "use",
        "inputs"
      ]
    },
    "ICollectionInputs": {
      "type": "object",
      "properties": {
        "collectionName": {
          "description": "集合名称",
          "maxLength": 64,
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "description": "描述信息",
          "maxLength": 128,
          "minLength": 1,
          "type": "string"
        },
        "createIndexes": {
          "description": "创建的索引",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ICreateIndex"
          }
        },
        "DropIndexes": {
          "description": "删除的索引",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IDropIndex"
          }
        },
        "aclTag": {
          "description": "权限标签。包含以下取值： READONLY：所有用户可读，仅创建者和管理员可写 PRIVATE：仅创建者及管理员可读写 ADMINWRITE：所有用户可读，仅管理员可写 ADMINONLY：仅管理员可读写 CUSTOM：自定义安全规则",
          "enum": [
            "ADMINONLY",
            "ADMINWRITE",
            "CUSTOM",
            "PRIVATE",
            "READONLY"
          ],
          "type": "string"
        },
        "aclRule": {
          "description": "aclTag 为 CUSTOM 时，安全规则内容",
          "type": "string"
        }
      },
      "required": [
        "collectionName"
      ]
    },
    "ICreateIndex": {
      "type": "object",
      "properties": {
        "name": {
          "description": "索引名称",
          "maxLength": 64,
          "minLength": 1,
          "type": "string"
        },
        "unique": {
          "description": "是否唯一索引",
          "type": "boolean"
        },
        "keys": {
          "description": "描述信息",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IIndexKey"
          }
        }
      },
      "required": [
        "keys",
        "name",
        "unique"
      ]
    },
    "IIndexKey": {
      "type": "object",
      "properties": {
        "name": {
          "description": "字段",
          "maxLength": 64,
          "minLength": 1,
          "type": "string"
        },
        "direction": {
          "description": "字段排序，可枚举值：-1（降序）、1（升序）、2dsphere（地理位置）",
          "enum": [
            "-1",
            "1",
            "2dsphere"
          ],
          "type": "string"
        }
      },
      "required": [
        "direction",
        "name"
      ]
    },
    "IDropIndex": {
      "type": "object",
      "properties": {
        "name": {
          "description": "索引名称",
          "type": "string"
        }
      },
      "required": [
        "name"
      ]
    },
    "IFrameworkPluginDenoInputsConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "use": {
          "type": "string",
          "enum": [
            "@cloudbase/framework-plugin-deno"
          ]
        },
        "inputs": {
          "description": "导出接口用于生成 JSON Schema 来进行智能提示",
          "type": "object",
          "properties": {
            "dockerImage": {
              "description": "Dockerfile 源镜像，字符串格式，默认值 `'debian:buster-slim'`",
              "default": "debian:buster-slim",
              "type": "string"
            },
            "runtime": {
              "description": "Deno 运行时版本，字符串格式，如 `'v1.3.0'`，默认值 `'latest'`",
              "default": "latest",
              "type": "string"
            },
            "entry": {
              "description": "入口文件，字符串格式，默认值 `''`\n\n配置入口文件为 `entry.ts` 后，docker 编译时，会执行 `deno install entry.ts`。\n\n但不推荐如此管理项目，推荐使用 denon 配置文件，并在部署前进行本地编译。",
              "default": "''",
              "type": "string"
            },
            "servicePath": {
              "description": "服务路径配置，字符串格式，如 `'/deno-app'`",
              "default": "/deno-app",
              "type": "string"
            },
            "serviceName": {
              "description": "服务名，字符串格式，如 `'deno-app'`",
              "default": "deno-app",
              "type": "string"
            },
            "projectPath": {
              "description": "本地代码文件夹相对于项目根目录的路径，字符串格式，默认值 `'./'`",
              "default": "./",
              "type": "string"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "required": [
        "use",
        "inputs"
      ]
    },
    "IFrameworkPluginNextInputsConfig": {
      "additionalProperties": false,
      "type": "object",
      "properties": {
        "use": {
          "type": "string",
          "enum": [
            "@cloudbase/framework-plugin-next"
          ]
        },
        "inputs": {
          "description": "导出接口用于生成 JSON Schema 来进行智能提示",
          "type": "object",
          "properties": {
            "entry": {
              "description": "Next 配置文件所在目录，默认当前项目所在目录",
              "default": "./",
              "type": "string"
            },
            "path": {
              "description": "访问子路径，如 `/next-ssr`",
              "default": "/next-ssr",
              "type": "string"
            },
            "name": {
              "description": "服务名，如`next-ssr`",
              "default": "next-ssr",
              "type": "string"
            },
            "buildCommand": {
              "description": "构建命令，如`npm run build`，没有可不传",
              "default": "npm run build",
              "type": "string"
            },
            "runtime": {
              "description": "函数运行时版本",
              "default": "\"Nodejs10.15",
              "enum": [
                "Nodejs10.15",
                "Nodejs8.9"
              ],
              "type": "string"
            }
          },
          "$schema": "http://json-schema.org/draft-07/schema#"
        }
      },
      "required": [
        "use",
        "inputs"
      ]
    }
  }
}